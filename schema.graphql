"used in Vote"
enum SignedMsgType {
  SIGNED_MSG_TYPE_UNKNOWN
  SIGNED_MSG_TYPE_PREVOTE
  SIGNED_MSG_TYPE_PRECOMMIT
  SIGNED_MSG_TYPE_PROPOSAL
}

"BlockIdFlag indicates which BlockID the signature is for"
enum BlockIDFlag {
  BLOCK_ID_FLAG_UNKNOWN
  BLOCK_ID_FLAG_ABSENT
  BLOCK_ID_FLAG_COMMIT
  BLOCK_ID_FLAG_NIL
}

type EventList @entity {
  id: ID!
  newBlock: EventBlock
  transaction: [EventTx!]
  validatorSetUpdates: EventValidatorSetUpdates
}

type EventData @entity {
  id: ID!
  event: Event
  block: EventBlock
}

type Block @entity {
  id: ID!
  header: Header
  data: Data
  evidence: EvidenceList
  lastCommit: Commit
}

type BlockID @entity {
  id: ID!
  hash: Bytes
  partSetHeader: PartSetHeader
}

type BlockParams @entity {
  id: ID!
  "Note: must be greater than 0"
  maxBytes: BigInt
  "Note: must be greater or equal to -1"
  maxGas: BigInt
}

type Commit @entity {
  id: ID!
  "must be > 0"
  height: BigInt
  "must be > 0"
  round: Int
  blockId: BlockID
  signatures: [CommitSig!]
}

type CommitSig @entity {
  id: ID!
  "must match those in the enum above"
  blockIdFlag: BlockIDFlag
  "hash 256 20 bytes - this is the first 20 characters of a 32-byte key - SHA256(pubkey)[:20]"
  validatorAddress: Bytes
  timestamp: Timestamp
  "length should be > 0 and < 64"
  signature: Bytes
}

type Consensus @entity {
  id: ID!
  block: BigInt
  app: BigInt
}

type ConsensusParams @entity {
  id: ID!
  block: BlockParams
  evidence: EvidenceParams
  validator: ValidatorParams
  version: VersionParams
}

type Data @entity {
  id: ID!
  txs: [Bytes!]
}

type Duration @entity {
  id: ID!
  seconds: BigInt
  nanos: Int
}

type DuplicateVoteEvidence @entity {
  id: ID!
  voteA: EventVote
  voteB: EventVote
  totalVotingPower: BigInt
  validatorPower: BigInt
  timestamp: Timestamp
}

type Event @entity {
  id: ID!
  eventType: String
  attributes: [EventAttribute!]
}

type EventAttribute @entity {
  id: ID!
  key: String
  value: String
  "nondeterministic"
  index: Boolean
}

type EventBlock @entity {
  id: ID!
  block: Block
  "not present in v0.34.13"
  blockId: BlockID
  resultBeginBlock: ResponseBeginBlock
  resultEndBlock: ResponseEndBlock
}

type EventTx @entity {
  id: ID!
  txResult: TxResult
}

type EventValidatorSetUpdates @entity {
  id: ID!
  validatorUpdates: [Validator!]
}

type EventVote @entity {
  id: ID!
  "should be present in the enum at the top of this file"
  eventVoteType: SignedMsgType
  "must be > 0"
  height: BigInt
  "must be > 0"
  round: Int
  blockId: BlockID
  timestamp: Timestamp
  "hash with a length of 20"
  validatorAddress: Bytes
  validatorIndex: Int
  "hash length should be >0 and <64"
  signature: Bytes
}

type Evidence @entity {
  id: ID!
  duplicateVoteEvidence: DuplicateVoteEvidence
  lightClientAttackEvidence: LightClientAttackEvidence
}

type EvidenceList @entity {
  id: ID!
  evidence: [Evidence!]
}

type EvidenceParams @entity {
  id: ID!
  maxAgeNumBlocks: BigInt
  maxAgeDuration: Duration
  "Default is 1048576 or 1MB"
  maxBytes: BigInt
}

type Header @entity {
  id: ID!
  version: Consensus
  chainId: String
  height: BigInt
  time: Timestamp
  lastBlockId: BlockID
  "hash 256 32 bytes"
  lastCommitHash: Bytes
  "hash 256 32 bytes"
  dataHash: Bytes
  "hash 256 32 bytes"
  validatorsHash: Bytes
  "hash 256 32 bytes"
  nextValidatorsHash: Bytes
  "hash 256 32 bytes"
  consensusHash: Bytes
  "determined by application, not a fixed length"
  appHash: Bytes
  "hash 256 32 bytes - first block will be results of an empty hash"
  lastResultsHash: Bytes
  "hash sha256 32 bytes"
  evidenceHash: Bytes
  "hash 256 20 bytes - this is the first 20 characters of a 32-byte key - SHA256(pubkey)[:20]"
  proposerAddress: Bytes
}

type LightBlock @entity {
  id: ID!
  "cannot be nil"
  signedHeader: SignedHeader
  "cannot be nil"
  validatorSet: ValidatorSet
}

type LightClientAttackEvidence @entity {
  id: ID!
  conflictingBlock: LightBlock
  commonHeight: BigInt
  byzantineValidators: [Validator!]
  totalVotingPower: BigInt
  timestamp: Timestamp
}

type PublicKey @entity {
  id: ID!
  ed25519: Bytes
  secp256k1: Bytes
}

type PartSetHeader @entity {
  id: ID!
  total: BigInt
  "hash 256 32 bytes"
  hash: Bytes
}

type ResponseBeginBlock @entity {
  id: ID!
  events: [Event!]
}

type ResponseEndBlock @entity {
  id: ID!
  validatorUpdates: [ValidatorUpdate!]
  consensusParamUpdates: ConsensusParams
  events: [Event!]
}

type ResponseDeliverTx @entity {
  id: ID!
  code: BigInt
  data: Bytes
  log: String
  info: String
  gasWanted: BigInt
  gasUsed: BigInt
  events: [Event!]
  codespace: String
}

type SignedHeader @entity {
  id: ID!
  header: Header
  commit: Commit
}

type Timestamp @entity {
  id: ID!
  seconds: BigInt
  nanos: Int
}

type TxResult @entity {
  id: ID!
  height: BigInt
  index: BigInt
  tx: Bytes
  result: ResponseDeliverTx
}

type Validator @entity {
  id: ID!
  address: Bytes
  "must be > 0"
  pubKey: PublicKey
  votingPower: BigInt
  proposerPriority: BigInt
}

type ValidatorParams @entity {
  id: ID!
  pubKeyTypes: [String!]
}

type ValidatorSet @entity {
  id: ID!
  "cannot be empty or nil"
  validators: [Validator!]
  "cannot be nil"
  proposer: Validator
  totalVotingPower: BigInt
}

type ValidatorUpdate @entity {
  id: ID!
  address: Bytes
  pubKey: PublicKey
  power: BigInt
}

type VersionParams @entity {
  id: ID!
  appVersion: BigInt
}

"Reward is not auto-generated but necessary"
type Reward @entity {
  id: ID!
  amount: String
  validator: String
}

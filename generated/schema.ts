// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class EventData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save EventData entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("EventData", id.toString(), this);
    }
  }

  static load(id: string): EventData | null {
    return changetype<EventData | null>(store.get("EventData", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get event(): string | null {
    let value = this.get("event");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set event(value: string | null) {
    if (!value) {
      this.unset("event");
    } else {
      this.set("event", Value.fromString(<string>value));
    }
  }

  get block(): string | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set block(value: string | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromString(<string>value));
    }
  }
}

export class EventList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventList entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save EventList entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("EventList", id.toString(), this);
    }
  }

  static load(id: string): EventList | null {
    return changetype<EventList | null>(store.get("EventList", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get new_block(): string | null {
    let value = this.get("new_block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set new_block(value: string | null) {
    if (!value) {
      this.unset("new_block");
    } else {
      this.set("new_block", Value.fromString(<string>value));
    }
  }

  get transaction(): Array<string> | null {
    let value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set transaction(value: Array<string> | null) {
    if (!value) {
      this.unset("transaction");
    } else {
      this.set("transaction", Value.fromStringArray(<Array<string>>value));
    }
  }

  get validator_set_updates(): string | null {
    let value = this.get("validator_set_updates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validator_set_updates(value: string | null) {
    if (!value) {
      this.unset("validator_set_updates");
    } else {
      this.set("validator_set_updates", Value.fromString(<string>value));
    }
  }
}

export class Reward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reward entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Reward entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Reward", id.toString(), this);
    }
  }

  static load(id: string): Reward | null {
    return changetype<Reward | null>(store.get("Reward", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }

  get validator(): string | null {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validator(value: string | null) {
    if (!value) {
      this.unset("validator");
    } else {
      this.set("validator", Value.fromString(<string>value));
    }
  }
}

export class Block extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Block entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Block entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Block", id.toString(), this);
    }
  }

  static load(id: string): Block | null {
    return changetype<Block | null>(store.get("Block", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get header(): string | null {
    let value = this.get("header");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set header(value: string | null) {
    if (!value) {
      this.unset("header");
    } else {
      this.set("header", Value.fromString(<string>value));
    }
  }

  get data(): string | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set data(value: string | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromString(<string>value));
    }
  }

  get evidence(): string | null {
    let value = this.get("evidence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set evidence(value: string | null) {
    if (!value) {
      this.unset("evidence");
    } else {
      this.set("evidence", Value.fromString(<string>value));
    }
  }

  get last_commit(): string | null {
    let value = this.get("last_commit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set last_commit(value: string | null) {
    if (!value) {
      this.unset("last_commit");
    } else {
      this.set("last_commit", Value.fromString(<string>value));
    }
  }
}

export class BlockID extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockID entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BlockID entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BlockID", id.toString(), this);
    }
  }

  static load(id: string): BlockID | null {
    return changetype<BlockID | null>(store.get("BlockID", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hash(): Bytes | null {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes | null) {
    if (!value) {
      this.unset("hash");
    } else {
      this.set("hash", Value.fromBytes(<Bytes>value));
    }
  }

  get part_set_header(): string | null {
    let value = this.get("part_set_header");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set part_set_header(value: string | null) {
    if (!value) {
      this.unset("part_set_header");
    } else {
      this.set("part_set_header", Value.fromString(<string>value));
    }
  }
}

export class BlockParams extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BlockParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BlockParams entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BlockParams", id.toString(), this);
    }
  }

  static load(id: string): BlockParams | null {
    return changetype<BlockParams | null>(store.get("BlockParams", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get max_bytes(): BigInt | null {
    let value = this.get("max_bytes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set max_bytes(value: BigInt | null) {
    if (!value) {
      this.unset("max_bytes");
    } else {
      this.set("max_bytes", Value.fromBigInt(<BigInt>value));
    }
  }

  get max_gas(): BigInt | null {
    let value = this.get("max_gas");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set max_gas(value: BigInt | null) {
    if (!value) {
      this.unset("max_gas");
    } else {
      this.set("max_gas", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Commit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Commit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Commit entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Commit", id.toString(), this);
    }
  }

  static load(id: string): Commit | null {
    return changetype<Commit | null>(store.get("Commit", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get height(): BigInt | null {
    let value = this.get("height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set height(value: BigInt | null) {
    if (!value) {
      this.unset("height");
    } else {
      this.set("height", Value.fromBigInt(<BigInt>value));
    }
  }

  get round(): i32 {
    let value = this.get("round");
    return value!.toI32();
  }

  set round(value: i32) {
    this.set("round", Value.fromI32(value));
  }

  get block_id(): string | null {
    let value = this.get("block_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set block_id(value: string | null) {
    if (!value) {
      this.unset("block_id");
    } else {
      this.set("block_id", Value.fromString(<string>value));
    }
  }

  get signatures(): Array<string> | null {
    let value = this.get("signatures");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set signatures(value: Array<string> | null) {
    if (!value) {
      this.unset("signatures");
    } else {
      this.set("signatures", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class CommitSig extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CommitSig entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CommitSig entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CommitSig", id.toString(), this);
    }
  }

  static load(id: string): CommitSig | null {
    return changetype<CommitSig | null>(store.get("CommitSig", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block_id_flag(): string | null {
    let value = this.get("block_id_flag");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set block_id_flag(value: string | null) {
    if (!value) {
      this.unset("block_id_flag");
    } else {
      this.set("block_id_flag", Value.fromString(<string>value));
    }
  }

  get validator_address(): Bytes | null {
    let value = this.get("validator_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set validator_address(value: Bytes | null) {
    if (!value) {
      this.unset("validator_address");
    } else {
      this.set("validator_address", Value.fromBytes(<Bytes>value));
    }
  }

  get timestamp(): string | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromString(<string>value));
    }
  }

  get signature(): Bytes | null {
    let value = this.get("signature");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set signature(value: Bytes | null) {
    if (!value) {
      this.unset("signature");
    } else {
      this.set("signature", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Consensus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Consensus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Consensus entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Consensus", id.toString(), this);
    }
  }

  static load(id: string): Consensus | null {
    return changetype<Consensus | null>(store.get("Consensus", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromBigInt(<BigInt>value));
    }
  }

  get app(): BigInt | null {
    let value = this.get("app");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set app(value: BigInt | null) {
    if (!value) {
      this.unset("app");
    } else {
      this.set("app", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ConsensusParams extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ConsensusParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ConsensusParams entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ConsensusParams", id.toString(), this);
    }
  }

  static load(id: string): ConsensusParams | null {
    return changetype<ConsensusParams | null>(store.get("ConsensusParams", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): string | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set block(value: string | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromString(<string>value));
    }
  }

  get evidence(): string | null {
    let value = this.get("evidence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set evidence(value: string | null) {
    if (!value) {
      this.unset("evidence");
    } else {
      this.set("evidence", Value.fromString(<string>value));
    }
  }

  get validator(): string | null {
    let value = this.get("validator");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validator(value: string | null) {
    if (!value) {
      this.unset("validator");
    } else {
      this.set("validator", Value.fromString(<string>value));
    }
  }

  get version(): string | null {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (!value) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(<string>value));
    }
  }
}

export class Data extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Data entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Data entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Data", id.toString(), this);
    }
  }

  static load(id: string): Data | null {
    return changetype<Data | null>(store.get("Data", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get txs(): Array<Bytes> | null {
    let value = this.get("txs");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set txs(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("txs");
    } else {
      this.set("txs", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class Duration extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Duration entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Duration entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Duration", id.toString(), this);
    }
  }

  static load(id: string): Duration | null {
    return changetype<Duration | null>(store.get("Duration", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seconds(): BigInt | null {
    let value = this.get("seconds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set seconds(value: BigInt | null) {
    if (!value) {
      this.unset("seconds");
    } else {
      this.set("seconds", Value.fromBigInt(<BigInt>value));
    }
  }

  get nanos(): i32 {
    let value = this.get("nanos");
    return value!.toI32();
  }

  set nanos(value: i32) {
    this.set("nanos", Value.fromI32(value));
  }
}

export class DuplicateVoteEvidence extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save DuplicateVoteEvidence entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DuplicateVoteEvidence entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DuplicateVoteEvidence", id.toString(), this);
    }
  }

  static load(id: string): DuplicateVoteEvidence | null {
    return changetype<DuplicateVoteEvidence | null>(
      store.get("DuplicateVoteEvidence", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vote_a(): string | null {
    let value = this.get("vote_a");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set vote_a(value: string | null) {
    if (!value) {
      this.unset("vote_a");
    } else {
      this.set("vote_a", Value.fromString(<string>value));
    }
  }

  get vote_b(): string | null {
    let value = this.get("vote_b");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set vote_b(value: string | null) {
    if (!value) {
      this.unset("vote_b");
    } else {
      this.set("vote_b", Value.fromString(<string>value));
    }
  }

  get total_voting_power(): BigInt | null {
    let value = this.get("total_voting_power");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set total_voting_power(value: BigInt | null) {
    if (!value) {
      this.unset("total_voting_power");
    } else {
      this.set("total_voting_power", Value.fromBigInt(<BigInt>value));
    }
  }

  get validator_power(): BigInt | null {
    let value = this.get("validator_power");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set validator_power(value: BigInt | null) {
    if (!value) {
      this.unset("validator_power");
    } else {
      this.set("validator_power", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): string | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromString(<string>value));
    }
  }
}

export class Event extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Event entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Event entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Event", id.toString(), this);
    }
  }

  static load(id: string): Event | null {
    return changetype<Event | null>(store.get("Event", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get event_type(): string | null {
    let value = this.get("event_type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set event_type(value: string | null) {
    if (!value) {
      this.unset("event_type");
    } else {
      this.set("event_type", Value.fromString(<string>value));
    }
  }

  get attributes(): Array<string> | null {
    let value = this.get("attributes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set attributes(value: Array<string> | null) {
    if (!value) {
      this.unset("attributes");
    } else {
      this.set("attributes", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class EventAttribute extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventAttribute entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save EventAttribute entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("EventAttribute", id.toString(), this);
    }
  }

  static load(id: string): EventAttribute | null {
    return changetype<EventAttribute | null>(store.get("EventAttribute", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get key(): string | null {
    let value = this.get("key");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set key(value: string | null) {
    if (!value) {
      this.unset("key");
    } else {
      this.set("key", Value.fromString(<string>value));
    }
  }

  get value(): string | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set value(value: string | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromString(<string>value));
    }
  }

  get index(): boolean {
    let value = this.get("index");
    return value!.toBoolean();
  }

  set index(value: boolean) {
    this.set("index", Value.fromBoolean(value));
  }
}

export class EventBlock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventBlock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save EventBlock entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("EventBlock", id.toString(), this);
    }
  }

  static load(id: string): EventBlock | null {
    return changetype<EventBlock | null>(store.get("EventBlock", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): string | null {
    let value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set block(value: string | null) {
    if (!value) {
      this.unset("block");
    } else {
      this.set("block", Value.fromString(<string>value));
    }
  }

  get block_id(): string | null {
    let value = this.get("block_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set block_id(value: string | null) {
    if (!value) {
      this.unset("block_id");
    } else {
      this.set("block_id", Value.fromString(<string>value));
    }
  }

  get result_begin_block(): string | null {
    let value = this.get("result_begin_block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set result_begin_block(value: string | null) {
    if (!value) {
      this.unset("result_begin_block");
    } else {
      this.set("result_begin_block", Value.fromString(<string>value));
    }
  }

  get result_end_block(): string | null {
    let value = this.get("result_end_block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set result_end_block(value: string | null) {
    if (!value) {
      this.unset("result_end_block");
    } else {
      this.set("result_end_block", Value.fromString(<string>value));
    }
  }
}

export class EventTx extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventTx entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save EventTx entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("EventTx", id.toString(), this);
    }
  }

  static load(id: string): EventTx | null {
    return changetype<EventTx | null>(store.get("EventTx", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tx_result(): string | null {
    let value = this.get("tx_result");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tx_result(value: string | null) {
    if (!value) {
      this.unset("tx_result");
    } else {
      this.set("tx_result", Value.fromString(<string>value));
    }
  }
}

export class EventValidatorSetUpdates extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save EventValidatorSetUpdates entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save EventValidatorSetUpdates entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("EventValidatorSetUpdates", id.toString(), this);
    }
  }

  static load(id: string): EventValidatorSetUpdates | null {
    return changetype<EventValidatorSetUpdates | null>(
      store.get("EventValidatorSetUpdates", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get validator_updates(): Array<string> | null {
    let value = this.get("validator_updates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set validator_updates(value: Array<string> | null) {
    if (!value) {
      this.unset("validator_updates");
    } else {
      this.set(
        "validator_updates",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class EventVote extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EventVote entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save EventVote entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("EventVote", id.toString(), this);
    }
  }

  static load(id: string): EventVote | null {
    return changetype<EventVote | null>(store.get("EventVote", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get event_vote_type(): string | null {
    let value = this.get("event_vote_type");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set event_vote_type(value: string | null) {
    if (!value) {
      this.unset("event_vote_type");
    } else {
      this.set("event_vote_type", Value.fromString(<string>value));
    }
  }

  get height(): BigInt | null {
    let value = this.get("height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set height(value: BigInt | null) {
    if (!value) {
      this.unset("height");
    } else {
      this.set("height", Value.fromBigInt(<BigInt>value));
    }
  }

  get round(): i32 {
    let value = this.get("round");
    return value!.toI32();
  }

  set round(value: i32) {
    this.set("round", Value.fromI32(value));
  }

  get block_id(): string | null {
    let value = this.get("block_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set block_id(value: string | null) {
    if (!value) {
      this.unset("block_id");
    } else {
      this.set("block_id", Value.fromString(<string>value));
    }
  }

  get timestamp(): string | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromString(<string>value));
    }
  }

  get validator_address(): Bytes | null {
    let value = this.get("validator_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set validator_address(value: Bytes | null) {
    if (!value) {
      this.unset("validator_address");
    } else {
      this.set("validator_address", Value.fromBytes(<Bytes>value));
    }
  }

  get validator_index(): i32 {
    let value = this.get("validator_index");
    return value!.toI32();
  }

  set validator_index(value: i32) {
    this.set("validator_index", Value.fromI32(value));
  }

  get signature(): Bytes | null {
    let value = this.get("signature");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set signature(value: Bytes | null) {
    if (!value) {
      this.unset("signature");
    } else {
      this.set("signature", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Evidence extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Evidence entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Evidence entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Evidence", id.toString(), this);
    }
  }

  static load(id: string): Evidence | null {
    return changetype<Evidence | null>(store.get("Evidence", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get duplicate_vote_evidence(): string | null {
    let value = this.get("duplicate_vote_evidence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set duplicate_vote_evidence(value: string | null) {
    if (!value) {
      this.unset("duplicate_vote_evidence");
    } else {
      this.set("duplicate_vote_evidence", Value.fromString(<string>value));
    }
  }

  get light_client_attack_evidence(): string | null {
    let value = this.get("light_client_attack_evidence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set light_client_attack_evidence(value: string | null) {
    if (!value) {
      this.unset("light_client_attack_evidence");
    } else {
      this.set("light_client_attack_evidence", Value.fromString(<string>value));
    }
  }
}

export class EvidenceList extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EvidenceList entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save EvidenceList entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("EvidenceList", id.toString(), this);
    }
  }

  static load(id: string): EvidenceList | null {
    return changetype<EvidenceList | null>(store.get("EvidenceList", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get evidence(): Array<string> | null {
    let value = this.get("evidence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set evidence(value: Array<string> | null) {
    if (!value) {
      this.unset("evidence");
    } else {
      this.set("evidence", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class EvidenceParams extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EvidenceParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save EvidenceParams entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("EvidenceParams", id.toString(), this);
    }
  }

  static load(id: string): EvidenceParams | null {
    return changetype<EvidenceParams | null>(store.get("EvidenceParams", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get max_age_num_blocks(): BigInt | null {
    let value = this.get("max_age_num_blocks");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set max_age_num_blocks(value: BigInt | null) {
    if (!value) {
      this.unset("max_age_num_blocks");
    } else {
      this.set("max_age_num_blocks", Value.fromBigInt(<BigInt>value));
    }
  }

  get max_age_duration(): string | null {
    let value = this.get("max_age_duration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set max_age_duration(value: string | null) {
    if (!value) {
      this.unset("max_age_duration");
    } else {
      this.set("max_age_duration", Value.fromString(<string>value));
    }
  }

  get max_bytes(): BigInt | null {
    let value = this.get("max_bytes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set max_bytes(value: BigInt | null) {
    if (!value) {
      this.unset("max_bytes");
    } else {
      this.set("max_bytes", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Header extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Header entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Header entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Header", id.toString(), this);
    }
  }

  static load(id: string): Header | null {
    return changetype<Header | null>(store.get("Header", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get version(): string | null {
    let value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set version(value: string | null) {
    if (!value) {
      this.unset("version");
    } else {
      this.set("version", Value.fromString(<string>value));
    }
  }

  get chain_id(): string | null {
    let value = this.get("chain_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set chain_id(value: string | null) {
    if (!value) {
      this.unset("chain_id");
    } else {
      this.set("chain_id", Value.fromString(<string>value));
    }
  }

  get height(): BigInt | null {
    let value = this.get("height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set height(value: BigInt | null) {
    if (!value) {
      this.unset("height");
    } else {
      this.set("height", Value.fromBigInt(<BigInt>value));
    }
  }

  get time(): string | null {
    let value = this.get("time");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set time(value: string | null) {
    if (!value) {
      this.unset("time");
    } else {
      this.set("time", Value.fromString(<string>value));
    }
  }

  get last_block_id(): string | null {
    let value = this.get("last_block_id");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set last_block_id(value: string | null) {
    if (!value) {
      this.unset("last_block_id");
    } else {
      this.set("last_block_id", Value.fromString(<string>value));
    }
  }

  get last_commit_hash(): Bytes | null {
    let value = this.get("last_commit_hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set last_commit_hash(value: Bytes | null) {
    if (!value) {
      this.unset("last_commit_hash");
    } else {
      this.set("last_commit_hash", Value.fromBytes(<Bytes>value));
    }
  }

  get data_hash(): Bytes | null {
    let value = this.get("data_hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data_hash(value: Bytes | null) {
    if (!value) {
      this.unset("data_hash");
    } else {
      this.set("data_hash", Value.fromBytes(<Bytes>value));
    }
  }

  get validators_hash(): Bytes | null {
    let value = this.get("validators_hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set validators_hash(value: Bytes | null) {
    if (!value) {
      this.unset("validators_hash");
    } else {
      this.set("validators_hash", Value.fromBytes(<Bytes>value));
    }
  }

  get next_validators_hash(): Bytes | null {
    let value = this.get("next_validators_hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set next_validators_hash(value: Bytes | null) {
    if (!value) {
      this.unset("next_validators_hash");
    } else {
      this.set("next_validators_hash", Value.fromBytes(<Bytes>value));
    }
  }

  get consensus_hash(): Bytes | null {
    let value = this.get("consensus_hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set consensus_hash(value: Bytes | null) {
    if (!value) {
      this.unset("consensus_hash");
    } else {
      this.set("consensus_hash", Value.fromBytes(<Bytes>value));
    }
  }

  get app_hash(): Bytes | null {
    let value = this.get("app_hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set app_hash(value: Bytes | null) {
    if (!value) {
      this.unset("app_hash");
    } else {
      this.set("app_hash", Value.fromBytes(<Bytes>value));
    }
  }

  get last_results_hash(): Bytes | null {
    let value = this.get("last_results_hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set last_results_hash(value: Bytes | null) {
    if (!value) {
      this.unset("last_results_hash");
    } else {
      this.set("last_results_hash", Value.fromBytes(<Bytes>value));
    }
  }

  get evidence_hash(): Bytes | null {
    let value = this.get("evidence_hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set evidence_hash(value: Bytes | null) {
    if (!value) {
      this.unset("evidence_hash");
    } else {
      this.set("evidence_hash", Value.fromBytes(<Bytes>value));
    }
  }

  get proposer_address(): Bytes | null {
    let value = this.get("proposer_address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set proposer_address(value: Bytes | null) {
    if (!value) {
      this.unset("proposer_address");
    } else {
      this.set("proposer_address", Value.fromBytes(<Bytes>value));
    }
  }
}

export class LightBlock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save LightBlock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LightBlock entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LightBlock", id.toString(), this);
    }
  }

  static load(id: string): LightBlock | null {
    return changetype<LightBlock | null>(store.get("LightBlock", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get signed_header(): string | null {
    let value = this.get("signed_header");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set signed_header(value: string | null) {
    if (!value) {
      this.unset("signed_header");
    } else {
      this.set("signed_header", Value.fromString(<string>value));
    }
  }

  get validator_set(): string | null {
    let value = this.get("validator_set");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set validator_set(value: string | null) {
    if (!value) {
      this.unset("validator_set");
    } else {
      this.set("validator_set", Value.fromString(<string>value));
    }
  }
}

export class LightClientAttackEvidence extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save LightClientAttackEvidence entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save LightClientAttackEvidence entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("LightClientAttackEvidence", id.toString(), this);
    }
  }

  static load(id: string): LightClientAttackEvidence | null {
    return changetype<LightClientAttackEvidence | null>(
      store.get("LightClientAttackEvidence", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get conflicting_block(): string | null {
    let value = this.get("conflicting_block");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set conflicting_block(value: string | null) {
    if (!value) {
      this.unset("conflicting_block");
    } else {
      this.set("conflicting_block", Value.fromString(<string>value));
    }
  }

  get common_height(): BigInt | null {
    let value = this.get("common_height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set common_height(value: BigInt | null) {
    if (!value) {
      this.unset("common_height");
    } else {
      this.set("common_height", Value.fromBigInt(<BigInt>value));
    }
  }

  get byzantine_validators(): Array<string> | null {
    let value = this.get("byzantine_validators");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set byzantine_validators(value: Array<string> | null) {
    if (!value) {
      this.unset("byzantine_validators");
    } else {
      this.set(
        "byzantine_validators",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get total_voting_power(): BigInt | null {
    let value = this.get("total_voting_power");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set total_voting_power(value: BigInt | null) {
    if (!value) {
      this.unset("total_voting_power");
    } else {
      this.set("total_voting_power", Value.fromBigInt(<BigInt>value));
    }
  }

  get timestamp(): string | null {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set timestamp(value: string | null) {
    if (!value) {
      this.unset("timestamp");
    } else {
      this.set("timestamp", Value.fromString(<string>value));
    }
  }
}

export class PublicKey extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PublicKey entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PublicKey entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PublicKey", id.toString(), this);
    }
  }

  static load(id: string): PublicKey | null {
    return changetype<PublicKey | null>(store.get("PublicKey", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ed25519(): Bytes | null {
    let value = this.get("ed25519");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set ed25519(value: Bytes | null) {
    if (!value) {
      this.unset("ed25519");
    } else {
      this.set("ed25519", Value.fromBytes(<Bytes>value));
    }
  }

  get secp256k1(): Bytes | null {
    let value = this.get("secp256k1");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set secp256k1(value: Bytes | null) {
    if (!value) {
      this.unset("secp256k1");
    } else {
      this.set("secp256k1", Value.fromBytes(<Bytes>value));
    }
  }
}

export class PartSetHeader extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PartSetHeader entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save PartSetHeader entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("PartSetHeader", id.toString(), this);
    }
  }

  static load(id: string): PartSetHeader | null {
    return changetype<PartSetHeader | null>(store.get("PartSetHeader", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get total(): BigInt | null {
    let value = this.get("total");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set total(value: BigInt | null) {
    if (!value) {
      this.unset("total");
    } else {
      this.set("total", Value.fromBigInt(<BigInt>value));
    }
  }

  get hash(): Bytes | null {
    let value = this.get("hash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set hash(value: Bytes | null) {
    if (!value) {
      this.unset("hash");
    } else {
      this.set("hash", Value.fromBytes(<Bytes>value));
    }
  }
}

export class ResponseBeginBlock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ResponseBeginBlock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ResponseBeginBlock entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ResponseBeginBlock", id.toString(), this);
    }
  }

  static load(id: string): ResponseBeginBlock | null {
    return changetype<ResponseBeginBlock | null>(
      store.get("ResponseBeginBlock", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get events(): Array<string> | null {
    let value = this.get("events");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set events(value: Array<string> | null) {
    if (!value) {
      this.unset("events");
    } else {
      this.set("events", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class ResponseEndBlock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ResponseEndBlock entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ResponseEndBlock entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ResponseEndBlock", id.toString(), this);
    }
  }

  static load(id: string): ResponseEndBlock | null {
    return changetype<ResponseEndBlock | null>(
      store.get("ResponseEndBlock", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get validator_updates(): Array<string> | null {
    let value = this.get("validator_updates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set validator_updates(value: Array<string> | null) {
    if (!value) {
      this.unset("validator_updates");
    } else {
      this.set(
        "validator_updates",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get consensus_param_updates(): string | null {
    let value = this.get("consensus_param_updates");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set consensus_param_updates(value: string | null) {
    if (!value) {
      this.unset("consensus_param_updates");
    } else {
      this.set("consensus_param_updates", Value.fromString(<string>value));
    }
  }

  get events(): Array<string> | null {
    let value = this.get("events");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set events(value: Array<string> | null) {
    if (!value) {
      this.unset("events");
    } else {
      this.set("events", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class ResponseDeliverTx extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ResponseDeliverTx entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ResponseDeliverTx entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ResponseDeliverTx", id.toString(), this);
    }
  }

  static load(id: string): ResponseDeliverTx | null {
    return changetype<ResponseDeliverTx | null>(
      store.get("ResponseDeliverTx", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get code(): BigInt | null {
    let value = this.get("code");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set code(value: BigInt | null) {
    if (!value) {
      this.unset("code");
    } else {
      this.set("code", Value.fromBigInt(<BigInt>value));
    }
  }

  get data(): Bytes | null {
    let value = this.get("data");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set data(value: Bytes | null) {
    if (!value) {
      this.unset("data");
    } else {
      this.set("data", Value.fromBytes(<Bytes>value));
    }
  }

  get log(): string | null {
    let value = this.get("log");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set log(value: string | null) {
    if (!value) {
      this.unset("log");
    } else {
      this.set("log", Value.fromString(<string>value));
    }
  }

  get info(): string | null {
    let value = this.get("info");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set info(value: string | null) {
    if (!value) {
      this.unset("info");
    } else {
      this.set("info", Value.fromString(<string>value));
    }
  }

  get gas_wanted(): BigInt | null {
    let value = this.get("gas_wanted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gas_wanted(value: BigInt | null) {
    if (!value) {
      this.unset("gas_wanted");
    } else {
      this.set("gas_wanted", Value.fromBigInt(<BigInt>value));
    }
  }

  get gas_used(): BigInt | null {
    let value = this.get("gas_used");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gas_used(value: BigInt | null) {
    if (!value) {
      this.unset("gas_used");
    } else {
      this.set("gas_used", Value.fromBigInt(<BigInt>value));
    }
  }

  get events(): Array<string> | null {
    let value = this.get("events");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set events(value: Array<string> | null) {
    if (!value) {
      this.unset("events");
    } else {
      this.set("events", Value.fromStringArray(<Array<string>>value));
    }
  }

  get codespace(): string | null {
    let value = this.get("codespace");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set codespace(value: string | null) {
    if (!value) {
      this.unset("codespace");
    } else {
      this.set("codespace", Value.fromString(<string>value));
    }
  }
}

export class SignedHeader extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SignedHeader entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SignedHeader entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SignedHeader", id.toString(), this);
    }
  }

  static load(id: string): SignedHeader | null {
    return changetype<SignedHeader | null>(store.get("SignedHeader", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get header(): string | null {
    let value = this.get("header");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set header(value: string | null) {
    if (!value) {
      this.unset("header");
    } else {
      this.set("header", Value.fromString(<string>value));
    }
  }

  get commit(): string | null {
    let value = this.get("commit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set commit(value: string | null) {
    if (!value) {
      this.unset("commit");
    } else {
      this.set("commit", Value.fromString(<string>value));
    }
  }
}

export class Timestamp extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Timestamp entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Timestamp entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Timestamp", id.toString(), this);
    }
  }

  static load(id: string): Timestamp | null {
    return changetype<Timestamp | null>(store.get("Timestamp", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get seconds(): BigInt | null {
    let value = this.get("seconds");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set seconds(value: BigInt | null) {
    if (!value) {
      this.unset("seconds");
    } else {
      this.set("seconds", Value.fromBigInt(<BigInt>value));
    }
  }

  get nanos(): i32 {
    let value = this.get("nanos");
    return value!.toI32();
  }

  set nanos(value: i32) {
    this.set("nanos", Value.fromI32(value));
  }
}

export class TxResult extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TxResult entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TxResult entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TxResult", id.toString(), this);
    }
  }

  static load(id: string): TxResult | null {
    return changetype<TxResult | null>(store.get("TxResult", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get height(): BigInt | null {
    let value = this.get("height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set height(value: BigInt | null) {
    if (!value) {
      this.unset("height");
    } else {
      this.set("height", Value.fromBigInt(<BigInt>value));
    }
  }

  get index(): BigInt | null {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set index(value: BigInt | null) {
    if (!value) {
      this.unset("index");
    } else {
      this.set("index", Value.fromBigInt(<BigInt>value));
    }
  }

  get tx(): Bytes | null {
    let value = this.get("tx");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set tx(value: Bytes | null) {
    if (!value) {
      this.unset("tx");
    } else {
      this.set("tx", Value.fromBytes(<Bytes>value));
    }
  }

  get result(): string | null {
    let value = this.get("result");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set result(value: string | null) {
    if (!value) {
      this.unset("result");
    } else {
      this.set("result", Value.fromString(<string>value));
    }
  }
}

export class Validator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Validator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Validator entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Validator", id.toString(), this);
    }
  }

  static load(id: string): Validator | null {
    return changetype<Validator | null>(store.get("Validator", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get pub_key(): string | null {
    let value = this.get("pub_key");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pub_key(value: string | null) {
    if (!value) {
      this.unset("pub_key");
    } else {
      this.set("pub_key", Value.fromString(<string>value));
    }
  }

  get voting_power(): BigInt | null {
    let value = this.get("voting_power");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set voting_power(value: BigInt | null) {
    if (!value) {
      this.unset("voting_power");
    } else {
      this.set("voting_power", Value.fromBigInt(<BigInt>value));
    }
  }

  get proposer_priority(): BigInt | null {
    let value = this.get("proposer_priority");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set proposer_priority(value: BigInt | null) {
    if (!value) {
      this.unset("proposer_priority");
    } else {
      this.set("proposer_priority", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ValidatorParams extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ValidatorParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ValidatorParams entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ValidatorParams", id.toString(), this);
    }
  }

  static load(id: string): ValidatorParams | null {
    return changetype<ValidatorParams | null>(store.get("ValidatorParams", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pub_key_types(): Array<string> | null {
    let value = this.get("pub_key_types");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set pub_key_types(value: Array<string> | null) {
    if (!value) {
      this.unset("pub_key_types");
    } else {
      this.set("pub_key_types", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class ValidatorSet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ValidatorSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ValidatorSet entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ValidatorSet", id.toString(), this);
    }
  }

  static load(id: string): ValidatorSet | null {
    return changetype<ValidatorSet | null>(store.get("ValidatorSet", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get validators(): Array<string> | null {
    let value = this.get("validators");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set validators(value: Array<string> | null) {
    if (!value) {
      this.unset("validators");
    } else {
      this.set("validators", Value.fromStringArray(<Array<string>>value));
    }
  }

  get proposer(): string | null {
    let value = this.get("proposer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set proposer(value: string | null) {
    if (!value) {
      this.unset("proposer");
    } else {
      this.set("proposer", Value.fromString(<string>value));
    }
  }

  get total_voting_power(): BigInt | null {
    let value = this.get("total_voting_power");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set total_voting_power(value: BigInt | null) {
    if (!value) {
      this.unset("total_voting_power");
    } else {
      this.set("total_voting_power", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ValidatorUpdate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ValidatorUpdate entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ValidatorUpdate entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ValidatorUpdate", id.toString(), this);
    }
  }

  static load(id: string): ValidatorUpdate | null {
    return changetype<ValidatorUpdate | null>(store.get("ValidatorUpdate", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (!value) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(<Bytes>value));
    }
  }

  get pub_key(): string | null {
    let value = this.get("pub_key");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pub_key(value: string | null) {
    if (!value) {
      this.unset("pub_key");
    } else {
      this.set("pub_key", Value.fromString(<string>value));
    }
  }

  get power(): BigInt | null {
    let value = this.get("power");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set power(value: BigInt | null) {
    if (!value) {
      this.unset("power");
    } else {
      this.set("power", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class VersionParams extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VersionParams entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save VersionParams entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("VersionParams", id.toString(), this);
    }
  }

  static load(id: string): VersionParams | null {
    return changetype<VersionParams | null>(store.get("VersionParams", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get app_version(): BigInt | null {
    let value = this.get("app_version");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set app_version(value: BigInt | null) {
    if (!value) {
      this.unset("app_version");
    } else {
      this.set("app_version", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Tx extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tx entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Tx entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Tx", id.toString(), this);
    }
  }

  static load(id: string): Tx | null {
    return changetype<Tx | null>(store.get("Tx", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get body(): string | null {
    let value = this.get("body");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set body(value: string | null) {
    if (!value) {
      this.unset("body");
    } else {
      this.set("body", Value.fromString(<string>value));
    }
  }

  get auth_info(): string | null {
    let value = this.get("auth_info");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set auth_info(value: string | null) {
    if (!value) {
      this.unset("auth_info");
    } else {
      this.set("auth_info", Value.fromString(<string>value));
    }
  }

  get signatures(): Array<Bytes> | null {
    let value = this.get("signatures");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytesArray();
    }
  }

  set signatures(value: Array<Bytes> | null) {
    if (!value) {
      this.unset("signatures");
    } else {
      this.set("signatures", Value.fromBytesArray(<Array<Bytes>>value));
    }
  }
}

export class TxBody extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TxBody entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save TxBody entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("TxBody", id.toString(), this);
    }
  }

  static load(id: string): TxBody | null {
    return changetype<TxBody | null>(store.get("TxBody", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get messages(): Array<string> | null {
    let value = this.get("messages");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set messages(value: Array<string> | null) {
    if (!value) {
      this.unset("messages");
    } else {
      this.set("messages", Value.fromStringArray(<Array<string>>value));
    }
  }

  get memo(): string | null {
    let value = this.get("memo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set memo(value: string | null) {
    if (!value) {
      this.unset("memo");
    } else {
      this.set("memo", Value.fromString(<string>value));
    }
  }

  get timeout_height(): BigInt | null {
    let value = this.get("timeout_height");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set timeout_height(value: BigInt | null) {
    if (!value) {
      this.unset("timeout_height");
    } else {
      this.set("timeout_height", Value.fromBigInt(<BigInt>value));
    }
  }

  get extension_options(): Array<string> | null {
    let value = this.get("extension_options");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set extension_options(value: Array<string> | null) {
    if (!value) {
      this.unset("extension_options");
    } else {
      this.set(
        "extension_options",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }

  get non_critical_extension_options(): Array<string> | null {
    let value = this.get("non_critical_extension_options");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set non_critical_extension_options(value: Array<string> | null) {
    if (!value) {
      this.unset("non_critical_extension_options");
    } else {
      this.set(
        "non_critical_extension_options",
        Value.fromStringArray(<Array<string>>value)
      );
    }
  }
}

export class AuthInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save AuthInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save AuthInfo entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("AuthInfo", id.toString(), this);
    }
  }

  static load(id: string): AuthInfo | null {
    return changetype<AuthInfo | null>(store.get("AuthInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get signer_infos(): Array<string> | null {
    let value = this.get("signer_infos");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set signer_infos(value: Array<string> | null) {
    if (!value) {
      this.unset("signer_infos");
    } else {
      this.set("signer_infos", Value.fromStringArray(<Array<string>>value));
    }
  }

  get fee(): string | null {
    let value = this.get("fee");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set fee(value: string | null) {
    if (!value) {
      this.unset("fee");
    } else {
      this.set("fee", Value.fromString(<string>value));
    }
  }

  get tip(): string | null {
    let value = this.get("tip");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tip(value: string | null) {
    if (!value) {
      this.unset("tip");
    } else {
      this.set("tip", Value.fromString(<string>value));
    }
  }
}

export class SignerInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SignerInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SignerInfo entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SignerInfo", id.toString(), this);
    }
  }

  static load(id: string): SignerInfo | null {
    return changetype<SignerInfo | null>(store.get("SignerInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get public_key(): string | null {
    let value = this.get("public_key");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set public_key(value: string | null) {
    if (!value) {
      this.unset("public_key");
    } else {
      this.set("public_key", Value.fromString(<string>value));
    }
  }

  get mode_info(): string | null {
    let value = this.get("mode_info");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mode_info(value: string | null) {
    if (!value) {
      this.unset("mode_info");
    } else {
      this.set("mode_info", Value.fromString(<string>value));
    }
  }

  get sequence(): BigInt | null {
    let value = this.get("sequence");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set sequence(value: BigInt | null) {
    if (!value) {
      this.unset("sequence");
    } else {
      this.set("sequence", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class ModeInfo extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ModeInfo entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ModeInfo entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ModeInfo", id.toString(), this);
    }
  }

  static load(id: string): ModeInfo | null {
    return changetype<ModeInfo | null>(store.get("ModeInfo", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get single(): string | null {
    let value = this.get("single");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set single(value: string | null) {
    if (!value) {
      this.unset("single");
    } else {
      this.set("single", Value.fromString(<string>value));
    }
  }

  get multi(): string | null {
    let value = this.get("multi");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set multi(value: string | null) {
    if (!value) {
      this.unset("multi");
    } else {
      this.set("multi", Value.fromString(<string>value));
    }
  }
}

export class Single extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Single entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Single entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Single", id.toString(), this);
    }
  }

  static load(id: string): Single | null {
    return changetype<Single | null>(store.get("Single", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mode(): string | null {
    let value = this.get("mode");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set mode(value: string | null) {
    if (!value) {
      this.unset("mode");
    } else {
      this.set("mode", Value.fromString(<string>value));
    }
  }
}

export class Multi extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Multi entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Multi entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Multi", id.toString(), this);
    }
  }

  static load(id: string): Multi | null {
    return changetype<Multi | null>(store.get("Multi", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get bitarray(): string | null {
    let value = this.get("bitarray");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set bitarray(value: string | null) {
    if (!value) {
      this.unset("bitarray");
    } else {
      this.set("bitarray", Value.fromString(<string>value));
    }
  }

  get mode_infos(): Array<string> | null {
    let value = this.get("mode_infos");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set mode_infos(value: Array<string> | null) {
    if (!value) {
      this.unset("mode_infos");
    } else {
      this.set("mode_infos", Value.fromStringArray(<Array<string>>value));
    }
  }
}

export class CompactBitArray extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CompactBitArray entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CompactBitArray entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CompactBitArray", id.toString(), this);
    }
  }

  static load(id: string): CompactBitArray | null {
    return changetype<CompactBitArray | null>(store.get("CompactBitArray", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get extra_bits_stored(): BigInt | null {
    let value = this.get("extra_bits_stored");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set extra_bits_stored(value: BigInt | null) {
    if (!value) {
      this.unset("extra_bits_stored");
    } else {
      this.set("extra_bits_stored", Value.fromBigInt(<BigInt>value));
    }
  }

  get elems(): Bytes | null {
    let value = this.get("elems");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set elems(value: Bytes | null) {
    if (!value) {
      this.unset("elems");
    } else {
      this.set("elems", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Fee extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Fee entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Fee entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Fee", id.toString(), this);
    }
  }

  static load(id: string): Fee | null {
    return changetype<Fee | null>(store.get("Fee", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): Array<string> | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set amount(value: Array<string> | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromStringArray(<Array<string>>value));
    }
  }

  get gas_limit(): BigInt | null {
    let value = this.get("gas_limit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set gas_limit(value: BigInt | null) {
    if (!value) {
      this.unset("gas_limit");
    } else {
      this.set("gas_limit", Value.fromBigInt(<BigInt>value));
    }
  }

  get payer(): string | null {
    let value = this.get("payer");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set payer(value: string | null) {
    if (!value) {
      this.unset("payer");
    } else {
      this.set("payer", Value.fromString(<string>value));
    }
  }

  get granter(): string | null {
    let value = this.get("granter");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set granter(value: string | null) {
    if (!value) {
      this.unset("granter");
    } else {
      this.set("granter", Value.fromString(<string>value));
    }
  }
}

export class Tip extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Tip entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Tip entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Tip", id.toString(), this);
    }
  }

  static load(id: string): Tip | null {
    return changetype<Tip | null>(store.get("Tip", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get amount(): Array<string> | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set amount(value: Array<string> | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromStringArray(<Array<string>>value));
    }
  }

  get tipper(): string | null {
    let value = this.get("tipper");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tipper(value: string | null) {
    if (!value) {
      this.unset("tipper");
    } else {
      this.set("tipper", Value.fromString(<string>value));
    }
  }
}

export class Coin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Coin entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Coin entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Coin", id.toString(), this);
    }
  }

  static load(id: string): Coin | null {
    return changetype<Coin | null>(store.get("Coin", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get denom(): string | null {
    let value = this.get("denom");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set denom(value: string | null) {
    if (!value) {
      this.unset("denom");
    } else {
      this.set("denom", Value.fromString(<string>value));
    }
  }

  get amount(): string | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set amount(value: string | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromString(<string>value));
    }
  }
}

export class Any extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Any entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Any entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Any", id.toString(), this);
    }
  }

  static load(id: string): Any | null {
    return changetype<Any | null>(store.get("Any", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type_url(): string | null {
    let value = this.get("type_url");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set type_url(value: string | null) {
    if (!value) {
      this.unset("type_url");
    } else {
      this.set("type_url", Value.fromString(<string>value));
    }
  }

  get value(): Bytes | null {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set value(value: Bytes | null) {
    if (!value) {
      this.unset("value");
    } else {
      this.set("value", Value.fromBytes(<Bytes>value));
    }
  }
}
